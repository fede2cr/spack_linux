#!/bin/sh
# GCC package build script (written by volkerdi@slackware.com)
#
# Copyright 2003, 2004  Slackware Linux, Inc., Concord, California, USA
# Copyright 2005, 2006  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Some notes, Fri May 16 12:31:32 PDT 2003:
#
# Why i486 and not i386?  Because the shared C++ libraries in gcc-3.2.x will
# require 486 opcodes even when a 386 target is used (so we already weren't
# compatible with the i386 for Slackware 9.0, didn't notice, and nobody
# complained :-).  gcc-3.3 fixes this issue and allows you to build a 386
# compiler, but the fix is done in a way that produces binaries that are not
# compatible with gcc-3.2.x compiled binaries.  To retain compatibility with
# Slackware 9.0, we'll have to use i486 (or better) as the compiler target
# for gcc-3.3.
#
# It's time to say goodbye to i386 support in Slackware.  I've surveyed 386
# usage online, and the most common thing I see people say when someone asks
# about running Linux on a 386 is to "run Slackware", but then they also 
# usually go on to say "be sure to get an OLD version, like 4.0, before glibc,
# because it'll be more efficient."  Now, if that's the general advice, then
# I see no reason to continue 386 support in the latest Slackware (and indeed
# it's no longer easily possible).

VERSION=3.4.6
ARCH=${ARCH:-i486}
TARGET=$ARCH-slackware-linux
BUILD=1

CWD=`pwd`
# Temporary build location.  This should *NOT* be a directory
# path a non-root user could create later...
TMP=/gcc-`mcookie`

# This is the main DESTDIR target:
PKG1=$TMP/package-gcc
# These are the directories to build other packages in:
PKG2=$TMP/package-gcc-g++
PKG3=$TMP/package-gcc-g77
PKG4=$TMP/package-gcc-gnat
PKG5=$TMP/package-gcc-java
PKG6=$TMP/package-gcc-objc
PKG7=$TMP/package-gcc-g++-gch

# Clear the build locations:
if [ -d $TMP ]; then
  rm -rf $TMP
fi
mkdir -p $PKG{1,2,3,4,5,6,7}/usr/doc/gcc-$VERSION

cd $TMP
tar xjvf $CWD/gcc-$VERSION.tar.bz2
# install docs
( cd gcc-$VERSION
  # Fix perms/owners
  chown -R root:root .
  find . -perm 777 -exec chmod 755 {} \;
  find . -perm 775 -exec chmod 755 {} \;
  find . -perm 754 -exec chmod 755 {} \;
  find . -perm 664 -exec chmod 644 {} \;
  mkdir -p $PKG1/usr/doc/gcc-$VERSION
  # Only the most recent ChangeLog... shouldn't be too big. :)
  cp -a \
    BUGS COPYING COPYING.LIB ChangeLog FAQ INSTALL MAINTAINERS README* *.html \
    $PKG1/usr/doc/gcc-$VERSION
  mkdir -p $PKG1/usr/doc/gcc-${VERSION}/gcc
  mkdir -p $PKG3/usr/doc/gcc-${VERSION}/gcc/f
  ( cd gcc
    cp -a ABOUT* COPYING* LANG* NEWS README* SERVICE \
       $PKG1/usr/doc/gcc-$VERSION/gcc
    cd f
    cp -a BUGS NEWS RELEASE-PREP \
       $PKG3/usr/doc/gcc-${VERSION}/gcc/f
    cd ../objc
    mkdir -p $PKG6/usr/doc/gcc-${VERSION}/gcc/objc
    cp -a README $PKG6/usr/doc/gcc-${VERSION}/gcc/objc
  )
  mkdir -p $PKG5/usr/doc/gcc-${VERSION}/fastjar
  ( cd fastjar
    cp -a \
      AUTHORS CHANGES COPYING ChangeLog NEWS README \
      $PKG5/usr/doc/gcc-${VERSION}/fastjar
  )
  mkdir -p $PKG3/usr/doc/gcc-${VERSION}/libf2c
  mkdir -p $PKG3/usr/doc/gcc-${VERSION}/libf2c/libF77
  mkdir -p $PKG3/usr/doc/gcc-${VERSION}/libf2c/libI77
  mkdir -p $PKG3/usr/doc/gcc-${VERSION}/libf2c/libU77
  ( cd libf2c
    cp -a \
      README TODO disclaimer.netlib permission.netlib readme.netlib \
      $PKG3/usr/doc/gcc-${VERSION}/libf2c
      ( cd libF77
        cp -a Notice README.netlib \
          $PKG3/usr/doc/gcc-${VERSION}/libf2c/libF77
      )
      ( cd libI77
        cp -a Notice README.netlib \
          $PKG3/usr/doc/gcc-${VERSION}/libf2c/libI77
      )
      ( cd libU77
        cp -a COPYING.LIB PROJECTS README \
          $PKG3/usr/doc/gcc-${VERSION}/libf2c/libU77
      )
  )
  mkdir -p $PKG5/usr/doc/gcc-${VERSION}/libjava
  ( cd libjava
    cp -a \
      COPYING ChangeLog HACKING LIBGCJ_LICENSE NEWS README THANKS \
      $PKG5/usr/doc/gcc-${VERSION}/libjava
  )
  mkdir -p $PKG6/usr/doc/gcc-${VERSION}/libobjc
  ( cd libobjc
    cp -a README README.threads THREADS THREADS.MACH \
      $PKG6/usr/doc/gcc-${VERSION}/libobjc
  )
  mkdir -p $PKG2/usr/doc/gcc-${VERSION}/libstdc++-v3
  ( cd libstdc++-v3
    cp -a README $PKG2/usr/doc/gcc-${VERSION}/libstdc++-v3
    cp -a docs/html/faq/index.html $PKG2/usr/doc/gcc-${VERSION}/libstdc++-v3/faq.html
  )
)
# build gcc
( mkdir gcc.build.lnx;
  cd gcc.build.lnx;
  ../gcc-$VERSION/configure --prefix=/usr \
              --enable-shared \
              --enable-threads=posix \
              --enable-__cxa_atexit \
              --disable-checking \
              --with-gnu-ld \
              --verbose \
              --target=${TARGET} \
              --host=${TARGET}

  # Start the build:
  make -j2 bootstrap

  ( cd gcc
    #make gnatlib GNATLIBCFLAGS="-g -O2"
    make -j2 gnatlib
    # This wants a shared -ladd2line?
    #make gnatlib-shared
    make -j2 gnattools
  )
  make -j2 info

  # Set GCCCHECK=something to run the tests
  if [ ! -z $GCCCHECK ]; then
    make -j2 check
  fi

  make install DESTDIR=$PKG1
#  make ada.install-common DESTDIR=$PKG1
#  make install-gnatlib DESTDIR=$PKG1
  make -i install-info DESTDIR=$PKG1

  chmod 755 $PKG1/usr/lib/libgcc_s.so.1

  # This is provided by binutils, so delete it here:
  rm -f $PKG1/usr/lib/libiberty.a

  # Strip out unneeded stuff from the libraries and binaries:
  ( cd $PKG1
    find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
    find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  )
  # Most people debug their own code (not the libraries), so we'll strip these.
  # It cuts the size down quite a bit.
  find $PKG1 -name "*.a" | xargs file | grep "archive" | cut -f 1 -d : | xargs strip -g

  # Fix stuff up:
  ( cd $PKG1/usr/info ; rm dir ; gzip -9 * )
  ( cd $PKG1
    mkdir -p lib
    cd lib
    ln -sf /usr/bin/cpp .
  )
  ( cd $PKG1/usr/bin
    mv g++ g++-gcc-$VERSION
    mv gcc gcc-$VERSION
    mv g77 g77-gcc-$VERSION
    ln -sf g++-gcc-$VERSION g++
    ln -sf gcc-$VERSION gcc
    ln -sf g77-gcc-$VERSION g77 
    ln -sf g++ c++
    ln -sf gcc cc
    ln -sf gcc-$VERSION ${TARGET}-gcc
    ln -sf gcc-$VERSION ${TARGET}-gcc-$VERSION
    ln -sf gcj ${TARGET}-gcj
    ln -sf gcjh ${TARGET}-gcjh
    ln -sf g++-gcc-$VERSION ${TARGET}-c++
    ln -sf g++-gcc-$VERSION ${TARGET}-g++
    ln -sf g77 f77
  )
  ( cd $PKG1/usr/man
    gzip -9 */*
    cd man1
    ln -sf g++.1.gz c++.1.gz
    ln -sf g77.1.gz f77.1.gz
    ln -sf gcc.1.gz cc.1.gz
  )  

  mkdir -p $PKG{1,2,3,4,5,6,7}/install
  # Install the descriptions:
  ( cd $CWD
    cat slack-desc.gcc > $PKG1/install/slack-desc
    cat slack-desc.gcc-g++ > $PKG2/install/slack-desc
    cat slack-desc.gcc-g77 > $PKG3/install/slack-desc
    cat slack-desc.gcc-gnat > $PKG4/install/slack-desc
    cat slack-desc.gcc-java > $PKG5/install/slack-desc
    cat slack-desc.gcc-objc > $PKG6/install/slack-desc
    cat slack-desc.gcc-g++-gch > $PKG7/install/slack-desc
  )

  ## build the tgz package
  #(
  #  cd $PKG1;
  #  makepkg -l y -c n $TMP/gcc-$VERSION-$ARCH-$BUILD.tgz
  #)
# keep a log
) 2>&1 | tee $TMP/gcc.build.log

# OK, time to split the big package where needed:

# gcc-g++:
( cd $PKG2
  mkdir -p usr/bin
  mv $PKG1/usr/bin/*++* usr/bin
  mkdir -p usr/include
  mv $PKG1/usr/include/c++ usr/include
  mkdir -p usr/lib
  mv $PKG1/usr/lib/*++* usr/lib
  mkdir -p usr/libexec/gcc/$TARGET/$VERSION
  mv $PKG1/usr/libexec/gcc/$TARGET/$VERSION/cc1plus usr/libexec/gcc/$TARGET/$VERSION/cc1plus
  mkdir -p usr/man/man1
  mv $PKG1/usr/man/man1/*++* usr/man/man1
)

# gcc-g77:
( cd $PKG3
  mkdir -p usr/bin
  mv $PKG1/usr/bin/*77* usr/bin
  mkdir -p usr/info
  mv $PKG1/usr/info/g77* usr/info
  mkdir -p usr/lib
  mv $PKG1/usr/lib/libfrtbegin.a usr/lib
  mv $PKG1/usr/lib/libg2c* usr/lib
  mkdir -p usr/libexec/gcc/$TARGET/$VERSION
  mv $PKG1/usr/libexec/gcc/$TARGET/$VERSION/f771 usr/libexec/gcc/$TARGET/$VERSION/f771
  mkdir -p usr/lib/gcc/$TARGET/$VERSION/include
  mv $PKG1/usr/lib/gcc/$TARGET/$VERSION/include/g2c.h usr/lib/gcc/$TARGET/$VERSION/include
  mkdir -p usr/man/man1
  mv $PKG1/usr/man/man1/*77* usr/man/man1
)

# gcc-gnat:
( cd $PKG4
  mkdir -p usr/bin
  mv $PKG1/usr/bin/gnat* usr/bin
  mv $PKG1/usr/bin/gpr* usr/bin
  mkdir -p usr/info
  mv $PKG1/usr/info/gnat* usr/info
  mkdir -p usr/share
  mv $PKG1/usr/share/gnat usr/share
  mkdir -p usr/libexec/gcc/$TARGET/$VERSION
  mv $PKG1/usr/libexec/gcc/$TARGET/$VERSION/gnat1 usr/libexec/gcc/$TARGET/$VERSION
  mkdir -p usr/lib/gcc/$TARGET/$VERSION
  mv $PKG1/usr/lib/gcc/$TARGET/$VERSION/adainclude usr/lib/gcc/$TARGET/$VERSION
  mv $PKG1/usr/lib/gcc/$TARGET/$VERSION/adalib usr/lib/gcc/$TARGET/$VERSION
)

# gcc-java:
( cd $PKG5
  mkdir -p usr/bin
  mv $PKG1/usr/bin/addr2name.awk usr/bin
  mv $PKG1/usr/bin/*gcj* usr/bin
  mv $PKG1/usr/bin/gij usr/bin
  mv $PKG1/usr/bin/grepjar usr/bin
  mv $PKG1/usr/bin/jar usr/bin
  mv $PKG1/usr/bin/jcf-dump usr/bin
  mv $PKG1/usr/bin/jv-* usr/bin
  mv $PKG1/usr/bin/rmi* usr/bin
  mkdir -p usr/include
  mv $PKG1/usr/include/gcj usr/include
  mv $PKG1/usr/include/gnu usr/include
  mv $PKG1/usr/include/java usr/include
  mv $PKG1/usr/include/javax usr/include
  mv $PKG1/usr/include/jni.h usr/include
  mv $PKG1/usr/include/jvmpi.h usr/include
  mv $PKG1/usr/include/org usr/include
  mkdir -p usr/info
  mv $PKG1/usr/info/gcj.* usr/info
  mv $PKG1/usr/info/fastjar.* usr/info
  mkdir -p usr/lib
  mv $PKG1/usr/lib/libgcj* usr/lib
  strip -g usr/lib/libgcj.a
  mv $PKG1/usr/lib/lib-org* usr/lib
  mv $PKG1/usr/lib/security usr/lib
  mkdir -p usr/lib/pkgconfig
  mv $PKG1/usr/lib/pkgconfig/libgcj.pc usr/lib/pkgconfig
  rmdir $PKG1/usr/lib/pkgconfig 2> /dev/null
  mkdir -p usr/libexec/gcc/$TARGET/$VERSION
  mv $PKG1/usr/libexec/gcc/$TARGET/$VERSION/jc1 usr/libexec/gcc/$TARGET/$VERSION
  mv $PKG1/usr/libexec/gcc/$TARGET/$VERSION/jvgenmain usr/libexec/gcc/$TARGET/$VERSION
  mkdir -p usr/lib/gcc/$TARGET/$VERSION/include
  mv $PKG1/usr/lib/gcc/$TARGET/$VERSION/include/gcj usr/lib/gcc/$TARGET/$VERSION/include
  mkdir -p usr/man/man1
  mv $PKG1/usr/man/man1/gcj.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/gcjh.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/gij.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/jcf-dump.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/jv-convert.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/jv-scan.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/rmic.1.gz usr/man/man1
  mv $PKG1/usr/man/man1/rmiregistry.1.gz usr/man/man1
  mkdir -p usr/share
  mv $PKG1/usr/share/java usr/share
)

# gcc-objc:
( cd $PKG6
  mkdir -p usr/lib
  mv $PKG1/usr/lib/libobjc* usr/lib
  mkdir -p usr/libexec/gcc/$TARGET/$VERSION
  mv $PKG1/usr/libexec/gcc/$TARGET/$VERSION/cc1obj usr/libexec/gcc/$TARGET/$VERSION
  mkdir -p usr/lib/gcc/$TARGET/$VERSION/include
  mv $PKG1/usr/lib/gcc/$TARGET/$VERSION/include/objc usr/lib/gcc/$TARGET/$VERSION/include
)

## NOTE: Thought about this, because the precompiled headers are so large.
## Probably easier to keep everything together, though.
## gcc-g++-gch (precompiled c++ headers)
#( cd $PKG7
#  mkdir -p usr/include/c++/$VERSION/$TARGET/bits
#  mv $PKG2/usr/include/c++/$VERSION/$TARGET/bits/stdc++.h.gch usr/include/c++/$VERSION/$TARGET/bits
#)

# Filter all .la files (thanks much to Mark Post for the sed script):
( cd $TMP
  for file in `find . -type f -name "*.la"` ; do
    cat $file | sed -e 's%-L/gcc-[[:graph:]]* % %g' > $TMP/tmp-la-file
    cat $TMP/tmp-la-file > $file
  done
  rm $TMP/tmp-la-file
)

( cd $PKG1
  makepkg -l y -c n $TMP/gcc-$VERSION-$ARCH-$BUILD.tgz )
( cd $PKG2
  makepkg -l y -c n $TMP/gcc-g++-$VERSION-$ARCH-$BUILD.tgz )
( cd $PKG3
  makepkg -l y -c n $TMP/gcc-g77-$VERSION-$ARCH-$BUILD.tgz )
( cd $PKG4
  makepkg -l y -c n $TMP/gcc-gnat-$VERSION-$ARCH-$BUILD.tgz )
( cd $PKG5
  makepkg -l y -c n $TMP/gcc-java-$VERSION-$ARCH-$BUILD.tgz )
( cd $PKG6
  makepkg -l y -c n $TMP/gcc-objc-$VERSION-$ARCH-$BUILD.tgz )
#( cd $PKG7
#  makepkg -l y -c n $TMP/gcc-g++-gch-$VERSION-$ARCH-$BUILD.tgz )

echo
echo "Slackware GCC package build complete!"
echo
