#!/bin/sh
## build glibc-$VERSION for Slackware
## by Patrick J. Volkerding <volkerdi@slackware.com>
CWD=`pwd`

# Temporary build location.  This should not be a directory
# path a non-root user could create later...
TMP=${TMP:-/glibc-tmp-`mcookie`}
if [ ! -d $TMP ]; then
  mkdir -p $TMP
fi

VERSION=${VERSION:-2.3.6}
CVSVER=2.3.6

# For dual NPTL/linuxthreads support we need one set of 2.4 kernel sources
# and another set of 2.6 kernel sources under /usr/src/.  This specifies the
# exact versions we want to use for compilation:
HEADERSTWOFOUR=2.4.33.3
HEADERSTWOSIX=2.6.17.13

if [ ! -d /usr/src/linux-${HEADERSTWOFOUR} -o ! -d /usr/src/linux-${HEADERSTWOSIX} ]; then
  echo "Hey buddy, you're missing some things in /usr/src, like:"
  echo "  /usr/src/linux-${HEADERSTWOFOUR} or,"
  echo "  /usr/src/linux-${HEADERSTWOSIX}."
  echo "You'd better fix that."
  read foobar;
fi

# $ARCH may be preset, otherwise i486 compatibility with i686 binary
# structuring is the Slackware default now, since this is what gcc-3.2+
# requires for binary compatibility with previous releases.
ARCH=${ARCH:-i486}

# This should be i486 for all 32-bit x86 arch:
TARGET=${TARGET:-i486}

BUILD=${BUILD:-6}

# Since glibc is built twice (for linuxthreads and NPTL versions), it is
# probably a good idea to make a patch function to put all patches in the
# build script in a single location.
apply_patches() {
  # Use old-style locale directories rather than a single (and strangely
  # formatted) /usr/lib/locale/locale-archive file:
  zcat $CWD/glibc.locale.no-archive.diff.gz | patch -p1 --verbose || exit 1
  # Fix XMMS/X crash caused by interaction with nVidia drivers:
  zcat $CWD/glibc.tls.crashfix.diff.gz | patch -p1 --verbose || exit 1
  # Fix NIS netgroups:
  zcat $CWD/glibc.nis-netgroups.diff.gz | patch -p1 --verbose || exit 1
  # Evidently glibc never expected Linux kernel versions to be in the
  # format 1.2.3.4.  This patch makes glibc consider the kernel version
  # to be only the first three digit groups found, and drops any
  # trailing non-digit characters:
  zcat $CWD/glibc.kernelversion.diff.gz | patch -p1 --verbose || exit 1
  # Support ru_RU.CP1251 locale:
  zcat $CWD/glibc.ru_RU.CP1251.diff.gz | patch -p1 --verbose || exit 1
  # Support sa_IN locale:
  zcat $CWD/glibc.sa_IN.diff.gz | patch -p1 --verbose || exit 1
  if [ $CVSVER = 2.3.6 ]; then
    # Update the timezone information, or a lot of people will be
    # very unhappy...
    ( cd timezone
      tar xzf $CWD/tzdata2006k.tar.gz
      chown root:root *
      mv yearistype.sh yearistype
      chmod 644 *
      chmod 755 yearistype
      mkdir tzcode
      cd tzcode
      tar xzf $CWD/tzcode2006k.tar.gz
      chown -R root:root .
      chmod 644 *
      cp -a *.c *.h ..
    )
  else
    exit 1
  fi
}

# I'll break this out as an option for fun  :-)
if [ "$ARCH" = "i386" ]; then
  OPTIMIZ="-O3 -march=i386 -mcpu=i686"
elif [ "$ARCH" = "i486" ]; then
  OPTIMIZ="-O3 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i586" ]; then
  OPTIMIZ="-O3 -march=i586"
elif [ "$ARCH" = "i686" ]; then
  OPTIMIZ="-O3 -march=i686"
elif [ "$ARCH" = "athlon" ]; then
  OPTIMIZ="-O3 -march=athlon"
elif [ "$ARCH" = "s390" ]; then
  OPTIMIZ="-O3"
elif [ "$ARCH" = "x86_64" ]; then
  OPTIMIZ="-O3"
else
  OPTIMIZ="-O3"
fi

# This is going to be the initial $DESTDIR:
export PKG=$TMP/package-glibc-incoming-tree
# We need another tmp initial $DESTDIR for the NPTL version now, too:
export PNPTL=$TMP/package-glibc-incoming-tree-nptl
# Then we'll compile the following packages from it:
PGLIBC=$TMP/package-glibc
PSOLIBS=$TMP/package-glibc-solibs
PZONE=$TMP/package-glibc-zoneinfo
PI18N=$TMP/package-glibc-i18n
PPROFILE=$TMP/package-glibc-profile
PDEBUG=$TMP/package-glibc-debug

# Empty these locations first:
for dir in $PKG $PGLIBC $PSOLIBS $PZONE $PI18N $PPROFILE $PDEBUG $PNPTL ; do
  if [ -d $dir ]; then
    rm -rf $dir
  fi
  mkdir -p $dir
done
if [ -d $TMP/glibc-$VERSION ]; then
  rm -rf $TMP/glibc-$VERSION
fi

# Create an incoming directory structure for glibc to be built into:
mkdir -p $PKG/lib
mkdir -p $PKG/sbin
mkdir -p $PKG/usr/bin
mkdir -p $PKG/usr/lib
mkdir -p $PKG/usr/sbin
mkdir -p $PKG/usr/include
mkdir -p $PKG/usr/doc
mkdir -p $PKG/usr/man
mkdir -p $PKG/usr/share
mkdir -p $PKG/var/db/nscd
mkdir -p $PKG/var/run/nscd
# And for $PNPTL:
mkdir -p $PNPTL/lib
mkdir -p $PNPTL/sbin
mkdir -p $PNPTL/usr/bin
mkdir -p $PNPTL/usr/lib
mkdir -p $PNPTL/usr/sbin
mkdir -p $PNPTL/usr/include
mkdir -p $PNPTL/usr/doc
mkdir -p $PNPTL/usr/man
mkdir -p $PNPTL/usr/share
mkdir -p $PKG/var/db/nscd
mkdir -p $PKG/var/run/nscd

cd $TMP
rm -rf $CWD/glibc-$CVSVER
tar xjvf $CWD/glibc-$CVSVER.tar.bz2
cd glibc-$CVSVER

tar xjf $CWD/glibc-libidn-$VERSION.tar.bz2
tar xjvf $CWD/glibc-linuxthreads-$VERSION.tar.bz2

chown -R root:root .

# Clean up leftover CVS directories:
find . -type d -name CVS -exec rm -r {} \;

# Apply patches; exit if any fail.
apply_patches
if [ ! $? = 0 ]; then
  exit 1
fi

# Make build directory:
mkdir build-glibc-$VERSION
cd build-glibc-$VERSION

# Start with the linuxthreads version, as it's what is compiled against by default (until
# such time as 2.4.x kernels are no longer in use):
echo "BUILDING DAS LINUXTHREADS"
CFLAGS="-g $OPTIMIZ" \
../configure \
  --prefix=/usr \
  --enable-kernel=2.4.1 \
  --with-headers=/usr/src/linux-${HEADERSTWOFOUR}/include \
  --enable-add-ons=libidn,linuxthreads \
  --with-tls \
  --without-__thread \
  --without-cvs \
  $TARGET-slackware-linux

make -j4 || exit 1
make install install_root=$PKG
make localedata/install-locales install_root=$PKG

## Begin NPTL support
# Now we need to build a set of /lib/tls libraries that use NPTL and work with
# 2.6 kernels and newer binaries:

cd $TMP
rm -rf glibc-$CVSVER
tar xjvf $CWD/glibc-$CVSVER.tar.bz2
cd glibc-$CVSVER

tar xjf $CWD/glibc-libidn-$VERSION.tar.bz2
tar xjvf $CWD/glibc-linuxthreads-$VERSION.tar.bz2

chown -R root:root .

# Clean up leftover CVS directories:
find . -type d -name CVS -exec rm -r {} \;

# Apply patches; exit if any fail.
apply_patches
if [ ! $? = 0 ]; then
  exit 1
fi

# Make build directory:
mkdir build-glibc-$VERSION
cd build-glibc-$VERSION

echo "BUILDING DAS NPTL"
CFLAGS="-g $OPTIMIZ" \
../configure \
  --prefix=/usr \
  --enable-kernel=2.6.13 \
  --with-headers=/usr/src/linux-${HEADERSTWOSIX}/include \
  --enable-add-ons=libidn,nptl \
  --with-tls \
  --with-__thread \
  --without-cvs \
  $TARGET-slackware-linux

make -j4 || exit 1
make install install_root=$PNPTL
#make localedata/install-locales install_root=$PNPTL

# Relocate the NPTL libraries in /lib/tls/incoming:
( cd $PNPTL/lib
  mkdir -p $PKG/lib/tls/incoming
  mv * $PKG/lib/tls/incoming
  mv $PKG/lib/tls/incoming/libSegFault.so $PKG/lib/tls
)

# Put some of the NPTL versions of the libraries into /usr/lib/nptl/
# in case something needs to links against them:
( cd $PNPTL/usr/lib
  mkdir -p $PKG/usr/lib/nptl
  cp -a libc.a libpthread.a libpthread_nonshared.a librt.a $PKG/usr/lib/nptl
  cp -a $CWD/nptl-so/* $PKG/usr/lib/nptl
  chown root:root $PKG/usr/lib/nptl/*.so
  chmod 644 $PKG/usr/lib/nptl/*.so
  ( cd $PKG/usr/lib/nptl
    strip -g *
    ln -sf /lib/tls/librt-${VERSION}.so librt.so
  )
)

# Extract unique NPTL headers to put in /usr/include/nptl/:
cd $TMP
rm -f nptl-includelist
( cd $PNPTL
  find usr/include -type f >> $TMP/nptl-includelist
)
# Next, make a copy of the different includes:
rm -rf $TMP/nptl-includes
mkdir -p $TMP/nptl-includes
for file in `cat $TMP/nptl-includelist` ; do
  # Make a copy of any header found only in NPTL:
  if [ ! -r $PKG/$file ] ; then
    ( cd $PNPTL
      echo $file uniq
      cp -a --parent $file $TMP/nptl-includes
    )
  # Otherwise, make a copy if the files are different:
  elif ! diff --brief $PKG/$file $PNPTL/$file 1> /dev/null 2> /dev/null ; then
    ( cd $PNPTL
      echo $file diff
      cp -a --parent $file $TMP/nptl-includes
    )
  fi
done
# Now add these files in $PKG:
mkdir $PKG/usr/include/nptl
cp -a $TMP/nptl-includes/usr/include/* $PKG/usr/include/nptl

## End NPTL support

# The prevailing standard seems to be putting unstripped libraries in
# /usr/lib/debug/ and stripping the debugging symbols from all the other
# libraries.  Only linuxthreads versions are provided.
mkdir -p $PKG/usr/lib/debug
cp -a $PKG/lib/l*.so* $PKG/usr/lib/debug
cp -a $PKG/usr/lib/*.a $PKG/usr/lib/debug
# Don't need debug+profile:
( cd $PKG/usr/lib/debug ; rm -f *_p.* )
# NOTE:  Is there really a reason for the glibc-debug package?
# If you're debugging glibc, you can also compile it, right?

## COMMENTED OUT:  There's no reason for profile libs to include -g information.
## Put back unstripped profiling libraries:
#mv $PKG/usr/lib/debug/*_p.a $PKG/usr/lib
# It might be best to put the unstripped and profiling libraries in glibc-debug and glibc-profile.

# I don't think "strip -g" causes the pthread problems.  It's --strip-unneeded that does.
strip -g $PKG/lib/l*.so*
strip -g $PKG/lib/tls/l*.so*
strip -g $PKG/usr/lib/l*.so*
strip -g $PKG/usr/lib/lib*.a

# Back to the sources dir to add some files/docs:
cd $TMP/glibc-$CVSVER

# We'll automatically install the config file for the Name Server Cache Daemon.
# Perhaps this should also have some commented-out startup code in rc.inet2...
mkdir -p $PKG/etc
cat nscd/nscd.conf > $PKG/etc/nscd.conf.new

# Install some scripts to help select a timezone:
mkdir -p $PKG/var/log/setup
cp -a $CWD/timezone-scripts/setup.timeconfig $PKG/var/log/setup
chown root:root $PKG/var/log/setup/setup.timeconfig
chmod 755 $PKG/var/log/setup/setup.timeconfig
mkdir -p $PKG/usr/sbin
cp -a $CWD/timezone-scripts/timeconfig $PKG/usr/sbin
chown root:root $PKG/usr/sbin/timeconfig
chmod 755 $PKG/usr/sbin/timeconfig

## Install docs:
( mkdir -p $PKG/usr/doc/glibc-$VERSION
  cp -a BUGS CONFORMANCE COPYING COPYING.LIB FAQ INSTALL INTERFACE LICENSES \
    NAMESPACE NEWS NOTES PROJECTS README README.libm $PKG/usr/doc/glibc-$VERSION
  cd linuxthreads
  mkdir -p $PKG/usr/doc/glibc-$VERSION/linuxthreads
  cp -a Banner FAQ.html LICENSE README README.Xfree3.2 linuxthreads.texi \
    Examples $PKG/usr/doc/glibc-$VERSION/linuxthreads
  cd man
  mkdir $PKG/usr/man/man3
  for file in *.man ; do
    cat $file | gzip -9c > $PKG/usr/man/man3/`basename $file .man`.3.gz
  done 
  find $PKG/usr/doc/glibc-$VERSION -type d | xargs chmod 755 
  find $PKG/usr/doc/glibc-$VERSION -type f | xargs chmod 644 )

# Don't forget to add the /usr/share/zoneinfo/localtime -> /etc/localtime symlink! :)
if [ ! -r $PKG/usr/share/zoneinfo/localtime ]; then
  ( cd $PKG/usr/share/zoneinfo ; ln -sf /etc/localtime . )
fi

# OK, there are some very old Linux standards that say that any binaries in a /bin or
# /sbin directory (and the directories themselves) should be group bin rather than
# group root, unless a specific group is really needed for some reason.
#
# I can't find any mention of this in more recent standards docs, and always thought
# that it was pretty cosmetic anyway (hey, if there's a reason -- fill me in!), so
# it's possible that this ownership change won't be followed in the near future
# (it's a PITA, and causes many bug reports when the perms change is occasionally
# forgotten).
#
# But, it's hard to get me to break old habits, so we'll continue the tradition here:
#
# No, no we won't.  This will be the last trace of it from now on.
#chown -R root:bin $PKG/sbin $PKG/usr/bin $PKG/usr/sbin

# Strip most binaries:
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip -g 2> /dev/null
)

# Fix info dir:
rm $PKG/usr/info/dir
gzip -9 $PKG/usr/info/*

# This is junk
rm $PKG/etc/ld.so.cache
rm $PKG/sbin/sln
( cd $PKG
  find . -name "*.orig" -exec rm {} \;
)

##################################
# OK, time to make some packages #
##################################

# glibc-zoneinfo.  We will start with an easy one to avoid breaking a sweat.  ;-)
cd $PZONE
# Install some scripts to help select a timezone:
mkdir -p $PZONE/var/log/setup
cp -a $CWD/timezone-scripts/setup.timeconfig $PZONE/var/log/setup
chown root:root $PZONE/var/log/setup/setup.timeconfig
chmod 755 $PZONE/var/log/setup/setup.timeconfig
mkdir -p $PZONE/usr/sbin
cp -a $CWD/timezone-scripts/timeconfig $PZONE/usr/sbin
chown root:root $PZONE/usr/sbin/timeconfig
chmod 755 $PZONE/usr/sbin/timeconfig
mkdir $PZONE/install
cat $CWD/doinst.sh-glibc-zoneinfo > $PZONE/install/doinst.sh
cat $CWD/slack-desc.glibc-zoneinfo > $PZONE/install/slack-desc
mkdir -p $PZONE/usr/share
cd $PZONE/usr/share
cp -a --verbose $PKG/usr/share/zoneinfo .
cd $PZONE
mkdir -p $PZONE/etc
# This is already hard-coded into doinst.sh (like it'll be there anyway ;-):
rm -f etc/localtime
# Wrap it up:
makepkg -l y -c n $TMP/glibc-zoneinfo-$VERSION-noarch-$BUILD.tgz

# glibc-profile:
cd $PPROFILE
mkdir -p usr/lib
# Might as well just grab these with 'mv' to simplify things later:
mv $PKG/usr/lib/lib*_p.a usr/lib
# Profile libs should be stripped.  Use the debug libs to debug...
( cd usr/lib ; strip -g *.a )
mkdir install
cp -a $CWD/slack-desc.glibc-profile install/slack-desc
makepkg -l y -c n $TMP/glibc-profile-$VERSION-$ARCH-$BUILD.tgz

# THIS IS NO LONGER PACKAGED (or is it?  might be better to let it be made, and then ship it or not...)
# glibc-debug:
cd $PDEBUG
mkdir -p usr/lib
# Might as well just grab these with 'mv' to simplify things later:
mv $PKG/usr/lib/debug usr/lib
mkdir install
cp -a $CWD/slack-desc.glibc-debug install/slack-desc
makepkg -l y -c n $TMP/glibc-debug-$VERSION-$ARCH-$BUILD.tgz
## INSTEAD, NUKE THESE LIBS
#rm -rf $PKG/usr/lib/debug

# glibc-i18n:
cd $PI18N
mkdir -p usr/lib
rm -rf usr/lib/locale
cp -a $PKG/usr/lib/locale usr/lib
mkdir -p usr/share
cp -a $PKG/usr/share/i18n usr/share
cp -a $PKG/usr/share/locale usr/share
mkdir install
cp -a $CWD/slack-desc.glibc-i18n install/slack-desc
makepkg -l y -c n $TMP/glibc-i18n-$VERSION-noarch-$BUILD.tgz

# glibc-solibs:
cd $PSOLIBS
mkdir -p etc/profile.d
cp -a $CWD/profile.d/* etc/profile.d
chown -R root:root etc
chmod 755 etc/profile.d/*
mkdir -p lib
cp -a $PKG/lib/* lib
( cd lib
  mkdir incoming
  mv *so* incoming
  mv incoming/libSegFault.so .
)
( cd lib/tls
  mkdir incoming
  mv *so* incoming
  mv incoming/libSegFault.so .
)
mkdir -p usr
cp -a $PKG/usr/bin usr
mv usr/bin/ldd .
rm usr/bin/*
mv ldd usr/bin
mkdir -p usr/lib
# The gconv directory has a lot of stuff, but including it here will save some problems.
# Seems standard elsewhere.
cp -a $PKG/usr/lib/gconv usr/lib
# Another manpage abandoned by GNU...
#mkdir -p usr/man/man1
#cp -a $PKG/usr/man/man1/ldd.1.gz usr/man/man1
mkdir -p usr/libexec
cp -a $PKG/usr/libexec/pt_chown usr/libexec
# Same usr.bin deal:
cp -a $PKG/sbin .
mv sbin/ldconfig .
rm sbin/*
mv ldconfig sbin
mkdir install
cp -a $CWD/slack-desc.glibc-solibs install/slack-desc
cp -a $CWD/doinst.sh-glibc-solibs install/doinst.sh
# Ditch links:
find . -type l -exec rm {} \;
# Build the package:
makepkg -l y -c n $TMP/glibc-solibs-$VERSION-$ARCH-$BUILD.tgz

# And finally, the complete "all-in-one" glibc package is created
# from whatever was leftover:
cd $PGLIBC
mv $PKG/* .
mkdir -p etc/profile.d
cp -a $CWD/profile.d/* etc/profile.d
chown -R root:root etc
chmod 755 etc/profile.d/*
# Ditch links (these are in doinst.sh-glibc):
find . -type l -exec rm {} \;
mkdir install
cp -a $CWD/slack-desc.glibc install/slack-desc
cp -a $CWD/doinst.sh-glibc install/doinst.sh
( cd lib
  mkdir incoming
  mv *so* incoming
  mv incoming/libSegFault.so .
)
( cd lib/tls
  mkdir incoming
  mv *so* incoming
  mv incoming/libSegFault.so .
)
# Build the package:
makepkg -l y -c n $TMP/glibc-$VERSION-$ARCH-$BUILD.tgz

# Done!
echo
echo "glibc packages built in $TMP!"

